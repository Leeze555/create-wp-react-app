/**
 * Common tasks for plugin publishing and development workflow.
 */

import { spawn, execSync } from "child_process";
import { resolve } from "path";

function applyDefaultRunnerConfiguration(grunt: IGrunt) {
    grunt.loadNpmTasks("grunt-cachebuster");
    grunt.loadNpmTasks("grunt-node-modules-cachebuster");
    grunt.loadNpmTasks("grunt-contrib-copy");
    grunt.loadNpmTasks("grunt-contrib-clean");
    grunt.loadNpmTasks("grunt-contrib-compress");
    grunt.loadNpmTasks("grunt-strip-code");

    grunt.file.defaultEncoding = "utf8";

    /**
     * Tasks configuration.
     */
    grunt.config.merge({
        pkg: grunt.file.readJSON("package.json"),
        BUILD_DIR: "build", // All distribution files
        BUILD_PLUGIN_DIR: "<%= BUILD_DIR %>/<%= pkg.slug %>",
        clean: {
            buildDir: "<%= BUILD_DIR %>/**/*",
            productionSource: [
                "<%= BUILD_PLUGIN_DIR %>/public/ts",
                "<%= BUILD_PLUGIN_DIR %>/composer.*",
                "<%= BUILD_PLUGIN_DIR %>/package.*"
            ]
        },
        copy: {
            // Resolve also yarn workspaces hoisting functionality
            npmLibsHoist: ((hoistConfig) => {
                hoistConfig.cwd = "../../node_modules";
                return hoistConfig;
            })({ ...grunt.config.get("copy.npmLibs") }),
            // Source files
            buildSrc: {
                expand: true,
                cwd: "src",
                src: ["**/*", "!**/vendor/**"],
                dest: "<%= BUILD_PLUGIN_DIR %>"
            },
            // Non-src files which also needs to be included into the installable plugin
            buildNonSrc: {
                expand: true,
                src: ["composer.*", "package.json", "LICENSE", "CHANGELOG.md", "wordpress.org/README.wporg.txt"],
                dest: "<%= BUILD_PLUGIN_DIR %>"
            }
        },
        compress: {
            installablePlugin: {
                options: {
                    archive: "<%= BUILD_DIR %>/<%= pkg.slug %>-<%= pkg.version %>-plugin.zip"
                },
                expand: true,
                cwd: "<%= BUILD_DIR %>",
                src: "<%= pkg.slug %>/**/*"
            }
        },
        cachebuster: {
            public: {
                options: {
                    banner:
                        "/* This file was automatically generated by the `grunt public-cachebuster` command (" +
                        new Date().toString() +
                        "). */",
                    format: "php"
                },
                src: (function() {
                    let src: string[] = [];
                    ["dist", "dev"].forEach((folder) => {
                        src = src.concat(["src/public/" + folder + "/**/*.js", "src/public/" + folder + "/**/*.css"]);
                    });
                    return src;
                })(),
                dest: "src/inc/base/others/cachebuster.php"
            }
        },
        node_modules_cachebuster: {
            publiclib: {
                options: {
                    banner:
                        "/* This file was automatically generated by the `grunt public-cachebuster` command (" +
                        new Date().toString() +
                        "). */",
                    format: "php",
                    altNodeModules: "../../node_modules"
                },
                src: ["src/public/lib/*"],
                dest: "src/inc/base/others/cachebuster-lib.php"
            }
        }
    });

    grunt.registerTask("public-cachebuster", ["cachebuster:public", "node_modules_cachebuster:publiclib"]);

    grunt.registerTask("copy-npmLibs", [
        "clean:npmLibs",
        "copy:npmLibs",
        "copy:npmLibsHoist",
        "node_modules_cachebuster:publiclib"
    ]);

    grunt.registerTask("productionComposerInstallation", function() {
        const done = this.async();
        const buildPluginDir = grunt.config.get("BUILD_PLUGIN_DIR");
        grunt.log.writeln("Install no-dev composer dependencies... (BUILD_PLUGIN_DIR=" + buildPluginDir + ")");

        spawn("composer install --no-dev --no-scripts --prefer-dist --working-dir " + buildPluginDir, {
            stdio: "inherit",
            shell: true
        })
            .on("error", (err) => {
                throw err;
            })
            .on("close", done);
    });

    /**
     * Some files are copied wrongly because copy:buildNonSrc is using the `expand` option so
     * e. g. `wordpress.org` is created as folder but the file inside should be moved.
     */
    grunt.registerTask("moveBuild", function() {
        const buildPluginDir = grunt.config.get("BUILD_PLUGIN_DIR");

        // Movements
        grunt.file.copy(buildPluginDir + "/wordpress.org/README.wporg.txt", buildPluginDir + "/README.wporg.txt");

        // Deletions
        grunt.file.delete(buildPluginDir + "/wordpress.org");
    });

    /**
     * Build the whole plugin to the distribution files.
     */
    grunt.registerTask(
        "build",
        [
            "clean:buildDir",
            "copy-npmLibs",
            "public-cachebuster",
            "copy:buildSrc",
            "copy:buildNonSrc",
            "moveBuild",
            "productionComposerInstallation",
            "clean:productionLibs",
            "strip_code:sourcemaps",
            "clean:productionSource",
            "buildReadmeTxt"
        ].concat(grunt.config.get("BUILD_POST_TASKS") || [])
    );

    /**
     * Versioning task that modifies the index.php file and reflects the same version
     * as in package.json.
     */
    grunt.registerTask("postversion", function() {
        const version = grunt.config.get("pkg.version");
        const indexphp = grunt.file.read("src/index.php");
        const newindexphp = indexphp.replace(/Version:(\s*)(.*)$/gm, "Version:$1" + version);
        grunt.file.write("src/index.php", newindexphp);

        // If we run in lerna context add it to the staged files (see https://git.io/JewXM)
        if (/lerna/.test(process.env.npm_execpath)) {
            const indexphpPath = resolve("src/index.php");
            grunt.log.writeln("Git stage " + indexphpPath);
            const add = execSync("git add '" + indexphpPath + "'");
            grunt.log.writeln(add.toString());
        }
    });

    /**
     * Generate the README.txt from README.wporg.txt and allow includes through
     * the [include:filename] syntax so wordpress.org can consume it.
     */
    grunt.registerTask("buildReadmeTxt", function() {
        const buildPluginDir = grunt.config.get("BUILD_PLUGIN_DIR");
        let publicTxt = grunt.file.read(buildPluginDir + "/README.wporg.txt");
        publicTxt = publicTxt.replace(/\[include:([^\]:]+)\]/g, (matched, filename) => {
            if (grunt.file.exists(buildPluginDir + "/" + filename)) {
                let content = grunt.file.read(buildPluginDir + "/" + filename);
                if (filename === "CHANGELOG.md") {
                    // Further changelog refactors...
                    // 1. Remove title (https://regex101.com/r/fEBgwx/1)
                    content = content.replace(/^# Change Log.*?(# \d+\.)/gms, "$1");

                    // 2. Remove types (https://regex101.com/r/fEBgwx/2)
                    content = content.replace(/### (?!feat|fix|perf|docs)\w+\n(.*?)\n\n\n/gms, "");

                    // 3. Remove empty lines (https://regex101.com/r/fEBgwx/3)
                    content = content.replace(/^(?:[\t ]*(?:\r?\n|\r))+/gms, "\n");
                }
                return content;
            }
            return matched;
        });
        grunt.file.write(buildPluginDir + "/README.txt", publicTxt);
        grunt.file.delete(buildPluginDir + "/README.wporg.txt");
    });

    /**
     * Rename README.md to README.txt so it can be consumed by wordpress.org. This task
     * is replaced by buildReadmeTxt and is only here for legacy purposes (legacy branch).
     *
     * @legacy
     */
    grunt.registerTask("serveRenameReadme", function() {
        const buildPluginDir = grunt.config.get("BUILD_PLUGIN_DIR");
        grunt.file.copy(buildPluginDir + "/README.md", buildPluginDir + "/README.txt");
        grunt.file.delete(buildPluginDir + "/README.md");
    });
}

export { applyDefaultRunnerConfiguration };
