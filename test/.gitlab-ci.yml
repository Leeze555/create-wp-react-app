stages:
    - validate
    - build
    - test
    - release
    - build production
    - deploy

image: matzeeable/ci-php-composer-node:latest

variables:
    # (CACHE WORKAROUND) Modify the GIT_CLONE_PATH with additional branch slug name, this can result for example in:
    # /builds/runner-938207/john/my-project/development/0/ on your runner server
    # This is necessery in conjunction with GIT_CLEAN_FLAGS=none and /builds must be in your docker shared volume (GitLab Runner).
    GIT_CLONE_PATH: $CI_BUILDS_DIR/runner-$CI_RUNNER_ID/$CI_PROJECT_NAMESPACE/$CI_PROJECT_NAME/$CI_COMMIT_REF_SLUG/$CI_CONCURRENT_ID
    GIT_CLEAN_FLAGS: -ffdx -e .yarn/ -e node_modules/ -e .cypress/ -e plugins/*/node_modules -e plugins/*/vendor/ # (CACHE WORKAROUND)
    # Prefix created compose services so we can act on them (volumes, network, not container because they are named by container_name), should be same as package.json name
    # Also consider that all docker relevant prefixes should also contain the CI_COMMIT_REF_SLUG environment variable
    COMPOSE_PROJECT_NAME: test
    # Define cache folders for yarn and cypress so they can be cached
    CYPRESS_CACHE_FOLDER: ./.cypress
    YARN_CACHE_FOLDER: ./.yarn
    # Additional settings
    DOCKER_DRIVER: overlay2
    JOB_PACKAGE_FOLDER: plugins
    LERNA_SKIP_MESSAGE: Lerna detected no change in this package, skip it...

# Due to the usage of GIT_CLEAN_FLAGS the cache is no longer used because it is very slow.
# There are some workarounds for caching for this CI pipeline.
# If https://gitlab.com/gitlab-org/gitlab-runner/merge_requests/1173 gets solved the pipeline will reduce
# and will use the standard caching system. Workarounds are marked with (CACHE WORKAROUND). Also a "install" job
# will be added.
# cache:
#     key: "$CI_COMMIT_REF_SLUG"
#     untracked: true
#     paths:
#         # Because this are a lot of files the compression for the cache in default zip format is very
#         # slow. See also https://gitlab.com/gitlab-org/gitlab-runner/merge_requests/1173
#         - .yarn/
#         - node_modules/
#         - .cypress/
#         - plugins/*/node_modules/
#         - plugins/*/vendor/

# Install all needed node and composer modules
.install:
    before_script:
        - yarn bootstrap

.only production:
    only:
        refs: ["feat/multipackage"]

# Only go on with the job if lerna detected changes
.lerna changes:
    before_script:
        - "[[ ! -f $JOB_PACKAGE_FOLDER/$JOB_PACKAGE_NAME/.publish ]] && echo $LERNA_SKIP_MESSAGE && exit 0"

include:
    - /devops/.gitlab/stage-validate.yml
    - /devops/.gitlab/stage-build.yml
    - /devops/.gitlab/stage-test.yml
    - /devops/.gitlab/stage-release.yml
    - /packages/utils/devops/.gitlab/.gitlab-ci.yml
    - /plugins/wp-reactjs-starter/devops/.gitlab/.gitlab-ci.yml
